# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Testing

on:
  push:
    branches: [ "main", "py3.11" ]
  pull_request:
    branches: [ "main" ]

env:
  SDL_AUDIODRIVER: disk
  SDL_DISKAUDIOFILE: /dev/null

jobs:
  test:
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        # python-version: ["3.9", "3.10", "3.11"]
        python-version: ["3.11"]
        # os: ["macos-latest", "ubuntu-latest", "windows-latest"]
        os: ["macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install libglew-dev libsdl2-dev xvfb
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install sdl2 glew
    - name: Install Python dependencies
      # Use NULL_PLATFORM to avoid needing graphics/sound on mac/win
      env:
        CFLAGS: ${{ (matrix.os == 'macos-latest' || matrix.os == 'windows-latest') && '-DNULL_PLATFORM' || '' }}
      run: |
        python -m pip install -U pip wheel
        python -m pip install -e '.[dev]'
    - name: Lint with flake8
      run: |
        # stop the build if there are any flake errors
        flake8
    - name: Check formatting with yapf
      run: |
        # stop the build if there are any formatting errors
        python -m yapf -qr dos_like tests
    - name: Check types with mypy
      run: |
        # stop the build if there are any typing errors
        python -m mypy dos_like
    - name: Test with unittest
      env:
        runner: ${{ matrix.os == 'ubuntu-latest' && 'xvfb-run' || '' }}
      run: |
        ${{ env.runner }} coverage run -m unittest discover -vvv
        coverage report
    - name: Verify distribution build
      run: |
        python -m build
        twine check dist/*
